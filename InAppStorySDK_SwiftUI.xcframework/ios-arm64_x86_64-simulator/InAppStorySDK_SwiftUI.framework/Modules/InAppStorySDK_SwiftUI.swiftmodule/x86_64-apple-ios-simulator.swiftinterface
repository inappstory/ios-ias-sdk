// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name InAppStorySDK_SwiftUI
import AVFoundation
import AudioToolbox
import Combine
import CommonCrypto
import Compression
import CoreFoundation
import CoreHaptics
import DeveloperToolsSupport
import Foundation
import ImageIO
@_exported import InAppStorySDK_SwiftUI
import MobileCoreServices
import Photos
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
import zlib
extension CoreFoundation.CGRect {
  public var area: CoreFoundation.CGFloat {
    get
  }
}
extension InAppStorySDK_SwiftUI.ArchiveOD {
  final public var data: Foundation.Data? {
    get
  }
}
extension InAppStorySDK_SwiftUI.Archive {
  final public var data: Foundation.Data? {
    get
  }
}
extension InAppStorySDK_SwiftUI.Archive {
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func addEntry(with path: Swift.String, relativeTo baseURL: Foundation.URL, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethod = .none, bufferSize: Swift.UInt32, progress: Foundation.Progress? = nil) throws
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func addEntry(with path: Swift.String, fileURL: Foundation.URL, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethod = .none, bufferSize: Swift.UInt32, progress: Foundation.Progress? = nil) throws
  @available(*, deprecated, message: "Please use `Int64` for `uncompressedSize` and provider `position`. `Int` for `bufferSize`.")
  final public func addEntry(with path: Swift.String, type: InAppStorySDK_SwiftUI.Entry.EntryType, uncompressedSize: Swift.UInt32, modificationDate: Foundation.Date = Date(), permissions: Swift.UInt16? = nil, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethod = .none, bufferSize: Swift.Int = defaultWriteChunkSize, progress: Foundation.Progress? = nil, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data) throws
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func remove(_ entry: InAppStorySDK_SwiftUI.Entry, bufferSize: Swift.UInt32, progress: Foundation.Progress? = nil) throws
}
public typealias StackFeedResult = Swift.Result<InAppStorySDK_SwiftUI.StackFeedObject?, any Swift.Error>
public struct StackFeedCover {
  public var feedCover: Foundation.URL?
  public var storyCover: Foundation.URL?
  public var videoCover: Foundation.URL?
  public var hasAudio: Swift.Bool
  public var title: Swift.String
  public var titleColor: UIKit.UIColor
  public var backgroundColor: UIKit.UIColor
}
public struct StackFeedObject {
  public var feed: Swift.String
  public var cover: InAppStorySDK_SwiftUI.StackFeedCover?
  public var opened: Swift.Array<Swift.Bool>
  public var storyData: Swift.Array<InAppStorySDK_SwiftUI.StoryData>
  public var currentIndex: Swift.Int
}
public let StoriesLoaded: Foundation.Notification.Name
public let UGCStoriesLoaded: Foundation.Notification.Name
public let ClickOnStory: Foundation.Notification.Name
public let ShowStory: Foundation.Notification.Name
public let CloseStory: Foundation.Notification.Name
public let ClickOnButton: Foundation.Notification.Name
public let ShowSlide: Foundation.Notification.Name
public let LikeStory: Foundation.Notification.Name
public let DislikeStory: Foundation.Notification.Name
public let FavoriteStory: Foundation.Notification.Name
public let ClickOnShareStory: Foundation.Notification.Name
public let StoryWidgetEvent: Foundation.Notification.Name
public let StartGame: Foundation.Notification.Name
public let CloseGame: Foundation.Notification.Name
public let FinishGame: Foundation.Notification.Name
public let SessionFailure: Foundation.Notification.Name
public let StoryFailure: Foundation.Notification.Name
public let CurrentStoryFailure: Foundation.Notification.Name
public let NetworkFailure: Foundation.Notification.Name
public let RequestFailure: Foundation.Notification.Name
public struct WidgetStory {
  public let id: Swift.String
  public let title: Swift.String
  public let image: Swift.String
  public let color: Swift.String
}
public struct Settings : Swift.Equatable {
  public var userID: Swift.String
  public var sign: Swift.String?
  public var tags: Swift.Array<Swift.String> {
    get
    set
  }
  public init(userID: Swift.String, sign: Swift.String? = nil, tags: Swift.Array<Swift.String> = [String](), placeholders: Swift.Dictionary<Swift.String, Swift.String>? = nil, imagesPlaceholders: Swift.Dictionary<Swift.String, Swift.String>? = nil, lang: Swift.String? = nil)
  public static func == (lhs: InAppStorySDK_SwiftUI.Settings, rhs: InAppStorySDK_SwiftUI.Settings) -> Swift.Bool
}
public struct PanelSettings {
  public var like: Swift.Bool
  public var favorites: Swift.Bool
  public var share: Swift.Bool
  public init(like: Swift.Bool = false, favorites: Swift.Bool = false, share: Swift.Bool = false)
}
public struct SharingObject {
  public let text: Swift.String?
  public let images: Swift.Array<UIKit.UIImage>?
  public let link: Swift.String?
  public let payload: Swift.String?
  public init(text: Swift.String?, images: Swift.Array<UIKit.UIImage>?, link: Swift.String?, payload: Swift.String?)
}
public struct EditorCellSettings {
}
public struct TimersGradient {
  public var colors: Swift.Array<UIKit.UIColor>
  public var startPoint: CoreFoundation.CGPoint
  public var endPoint: CoreFoundation.CGPoint
  public var locations: Swift.Array<Swift.Double>
  public var height: Swift.Double
  public init(colors: Swift.Array<UIKit.UIColor> = [UIColor(white: 0.0, alpha: 0.0), UIColor(white: 0.0, alpha: 0.1)], startPoint: CoreFoundation.CGPoint = CGPoint(x: 0.5, y: 1.0), endPoint: CoreFoundation.CGPoint = CGPoint(x: 0.5, y: 0.0), locations: Swift.Array<Swift.Double> = [0, 1], height: Swift.Double = 200.0)
}
public enum StoryType : Swift.String {
  case story, storyUGC
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum StorySource : Swift.String {
  case single, onboarding, list, favorite
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ShowStoryAction : Swift.String {
  case open, tap, swipe, auto, custom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CloseStoryAction : Swift.String {
  case swipe, click, auto, custom
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StoryData {
  public var id: Swift.String?
  public var title: Swift.String?
  public var tags: Swift.Array<Swift.String>?
  public var feed: Swift.String
  public var slidesCount: Swift.Int
  public var type: InAppStorySDK_SwiftUI.StoryType
  public var source: InAppStorySDK_SwiftUI.StorySource
  public var payload: Swift.Dictionary<Swift.String, Swift.String>?
}
public struct SlideData {
  public var storyData: InAppStorySDK_SwiftUI.StoryData?
  public var index: Swift.Int
  public var payload: Swift.String?
}
public struct GameStoryData {
  public var slideData: InAppStorySDK_SwiftUI.SlideData?
  public var gameID: Swift.String?
}
public enum IASLogLevel {
  case all
  case initializ
  case network
  case reader
  case js
  case profiling
  case cache
  public static func == (a: InAppStorySDK_SwiftUI.IASLogLevel, b: InAppStorySDK_SwiftUI.IASLogLevel) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct IASLogObject {
  public var message: Swift.String?
  public var warning: Swift.String?
  public var error: Swift.String?
  public var cURL: Swift.String?
  public var data: InAppStorySDK_SwiftUI.IASLogData
}
public struct IASLogData {
  public var level: InAppStorySDK_SwiftUI.IASLogLevel
  public var function: Swift.String
  public var line: Swift.Int
}
public enum IASEvent {
  public enum Story {
    case storiesLoaded(feed: Swift.String? = nil, stories: Swift.Array<InAppStorySDK_SwiftUI.StoryData>)
    case ugcStoriesLoaded(stories: Swift.Array<InAppStorySDK_SwiftUI.StoryData>)
    case clickOnStory(storyData: InAppStorySDK_SwiftUI.StoryData, index: Swift.Int)
    case showStory(storyData: InAppStorySDK_SwiftUI.StoryData, action: InAppStorySDK_SwiftUI.ShowStoryAction)
    case closeStory(slideData: InAppStorySDK_SwiftUI.SlideData, action: InAppStorySDK_SwiftUI.CloseStoryAction)
    case clickOnButton(slideData: InAppStorySDK_SwiftUI.SlideData, link: Swift.String)
    case showSlide(slideData: InAppStorySDK_SwiftUI.SlideData)
    case likeStory(slideData: InAppStorySDK_SwiftUI.SlideData, value: Swift.Bool)
    case dislikeStory(slideData: InAppStorySDK_SwiftUI.SlideData, value: Swift.Bool)
    case favoriteStory(slideData: InAppStorySDK_SwiftUI.SlideData, value: Swift.Bool)
    case clickOnShareStory(slideData: InAppStorySDK_SwiftUI.SlideData)
    case storyWidgetEvent(slideData: InAppStorySDK_SwiftUI.SlideData?, name: Swift.String, data: Swift.Dictionary<Swift.String, Any>?)
  }
  public enum Game {
    case startGame(gameData: InAppStorySDK_SwiftUI.GameStoryData)
    case closeGame(gameData: InAppStorySDK_SwiftUI.GameStoryData)
    case finishGame(gameData: InAppStorySDK_SwiftUI.GameStoryData, result: Swift.Dictionary<Swift.String, Any>)
    case eventGame(gameData: InAppStorySDK_SwiftUI.GameStoryData, name: Swift.String, payload: Swift.Dictionary<Swift.String, Any>)
    case gameFailure(gameData: InAppStorySDK_SwiftUI.GameStoryData, message: Swift.String)
  }
  public enum Failure {
    case sessionFailure(message: Swift.String)
    case storyFailure(message: Swift.String)
    case currentStoryFailure(message: Swift.String)
    case networkFailure(message: Swift.String)
    case requestFailure(message: Swift.String, statusCode: Swift.Int)
  }
}
extension InAppStorySDK_SwiftUI.Archive {
  final public func extract(_ entry: InAppStorySDK_SwiftUI.Entry, to url: Foundation.URL, bufferSize: Swift.Int = defaultReadChunkSize, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil) throws -> InAppStorySDK_SwiftUI.CRC32
  final public func extract(_ entry: InAppStorySDK_SwiftUI.Entry, bufferSize: Swift.Int = defaultReadChunkSize, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> InAppStorySDK_SwiftUI.CRC32
}
extension InAppStorySDK_SwiftUI.ArchiveOD {
  final public func extract(_ entry: InAppStorySDK_SwiftUI.EntryOD, to url: Foundation.URL, bufferSize: Swift.UInt32 = defaultReadChunkSizeOD, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil) throws -> InAppStorySDK_SwiftUI.CRC32
  final public func extract(_ entry: InAppStorySDK_SwiftUI.EntryOD, bufferSize: Swift.UInt32 = defaultReadChunkSizeOD, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> InAppStorySDK_SwiftUI.CRC32
}
public struct PhoneFormat {
  public let phoneFormat: Swift.String
  public let regexp: Swift.String
  public init(defaultPhoneFormat: Swift.String)
  public init(phoneFormat: Swift.String, regexp: Swift.String)
}
@_hasMissingDesignatedInitializers public class Game {
  public var id: Swift.String
  public init(id: Swift.String)
  @objc deinit
}
public protocol IASLoggerProtocol {
  var level: Swift.Array<InAppStorySDK_SwiftUI.IASLogLevel> { get set }
  func log(object: InAppStorySDK_SwiftUI.IASLogObject)
}
extension SwiftUI.View {
  public func onboardingStories(feed: Swift.String? = nil, limit: Swift.Int = 0, tags: [Swift.String]? = nil, panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, isPresented: SwiftUI.Binding<Swift.Bool>, willAppear: (() -> Swift.Void)? = nil, onDismiss: (() -> Swift.Void)? = nil, onAction: ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType) -> Swift.Void)? = nil, goodsObjects: ((_ skus: Swift.Array<Swift.String>, _ complete: (Swift.Result<Swift.Array<any InAppStorySDK_SwiftUI.GoodsObjectProtocol>, InAppStorySDK_SwiftUI.GoodsFailure>) -> Swift.Void) -> Swift.Void)? = nil, selectGoodsItem: ((_ item: any InAppStorySDK_SwiftUI.GoodsObjectProtocol) -> Swift.Void)? = nil) -> some SwiftUI.View
  
  public func singleStory(storyID: Swift.String, once: Swift.Bool = false, panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, isPresented: SwiftUI.Binding<Swift.Bool>, willAppear: (() -> Swift.Void)? = nil, onDismiss: (() -> Swift.Void)? = nil, onAction: ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType) -> Swift.Void)? = nil, goodsObjects: ((_ skus: Swift.Array<Swift.String>, _ complete: (Swift.Result<Swift.Array<any InAppStorySDK_SwiftUI.GoodsObjectProtocol>, InAppStorySDK_SwiftUI.GoodsFailure>) -> Swift.Void) -> Swift.Void)? = nil, selectGoodsItem: ((_ item: any InAppStorySDK_SwiftUI.GoodsObjectProtocol) -> Swift.Void)? = nil) -> some SwiftUI.View
  
}
public typealias FILEPointer = Swift.UnsafeMutablePointer<Darwin.FILE>
@_Concurrency.MainActor(unsafe) public struct StoryListUGCView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(filter: Swift.Dictionary<Swift.String, Any>, isEditorEnabled: Swift.Bool = false, refresh: SwiftUI.Binding<Swift.Bool> = .constant(false))
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21InAppStorySDK_SwiftUI0C11ListUGCViewV4bodyQrvp", 0) __
}
extension InAppStorySDK_SwiftUI.StoryListUGCView {
  @_Concurrency.MainActor(unsafe) public func onUpdate(_ storiesDidUpdated: @escaping (_ isContent: Swift.Bool, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func onAction(_ onAction: @escaping ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func willAppear(_ willAppear: @escaping ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func onDismiss(_ onDismiss: @escaping ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func editorDidSelect(_ editorSelected: @escaping () -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func getGoodsObject(_ getGoodsObject: @escaping ((_ skus: Swift.Array<Swift.String>, _ complete: @escaping InAppStorySDK_SwiftUI.GoodsComplete) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func goodItemSelected(_ goodItemSelected: @escaping (_ item: any InAppStorySDK_SwiftUI.GoodsObjectProtocol, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListUGCView
}
extension InAppStorySDK_SwiftUI.StoryListUGCView {
  @_Concurrency.MainActor(unsafe) public func onVisibleAreaUpdated(_ onVisibleAreaUpdated: @escaping (_ items: Swift.Array<InAppStorySDK_SwiftUI.VisibleStoryItem>) -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func collectVisibleAreaData(_ collect: @escaping ((_ collect: @escaping () -> Swift.Void) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func updateVisibleArea(_ update: @escaping ((_ update: @escaping () -> Swift.Void) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListUGCView
}
extension InAppStorySDK_SwiftUI.StoryListUGCView {
  @_Concurrency.MainActor(unsafe) public func direction(_ direction: InAppStorySDK_SwiftUI.ScrollListDirection) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func edgeInserts(_ inserts: @escaping () -> UIKit.UIEdgeInsets) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func itemsSize(_ size: @escaping () -> CoreFoundation.CGSize) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func lineSpacing(_ spacing: @escaping () -> CoreFoundation.CGFloat) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func interitemSpacing(_ spacing: @escaping () -> CoreFoundation.CGFloat) -> InAppStorySDK_SwiftUI.StoryListUGCView
}
extension InAppStorySDK_SwiftUI.StoryListUGCView {
  @_Concurrency.MainActor(unsafe) public func setStoryCell(customCell: any InAppStorySDK_SwiftUI.StoryCellProtocol) -> InAppStorySDK_SwiftUI.StoryListUGCView
  @_Concurrency.MainActor(unsafe) public func setEditorCell(customCell: any InAppStorySDK_SwiftUI.EditorCellProtocol) -> InAppStorySDK_SwiftUI.StoryListUGCView
}
extension Foundation.FileManager {
  public func zipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, shouldKeepParent: Swift.Bool = true, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethod = .none, progress: Foundation.Progress? = nil) throws
  public func unzipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, preferredEncoding: Swift.String.Encoding? = nil) throws
}
extension Foundation.URL {
  public func isContained(in parentDirectoryURL: Foundation.URL) -> Swift.Bool
}
extension Foundation.FileManager {
  public func zipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, shouldKeepParent: Swift.Bool = true, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethodOD = .none, progress: Foundation.Progress? = nil) throws
  public func unzipItemOD(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, preferredEncoding: Swift.String.Encoding? = nil) throws
}
@objc @_inheritsConvenienceInitializers public class InAppStory : ObjectiveC.NSObject {
  public static var shared: InAppStorySDK_SwiftUI.InAppStory
  public static let VersionSDK: Swift.String
  public static let BuildSDK: Swift.String
  public static var frameworkInfo: Swift.String {
    get
  }
  public var settings: InAppStorySDK_SwiftUI.Settings? {
    get
    set
  }
  public var appVersion: Swift.String?
  public var appBuild: Swift.String?
  public var favoritesCount: Swift.Int {
    get
  }
  public var editorCellSettings: InAppStorySDK_SwiftUI.EditorCellSettings?
  public var widgetStories: [InAppStorySDK_SwiftUI.WidgetStory]
  public var sslPinningHashKeys: [Swift.String]?
  public var coverQuality: InAppStorySDK_SwiftUI.Quality
  public var showCellTitle: Swift.Bool
  public var cellGradientEnabled: Swift.Bool
  public var cellBorderRadius: CoreFoundation.CGFloat
  public var cellBorderColor: UIKit.UIColor
  public var cellBorderOpenedColor: UIKit.UIColor
  public var goodsCellImageBackgroundColor: UIKit.UIColor
  public var goodsCellImageCornerRadius: CoreFoundation.CGFloat
  public var goodsCellMainTextColor: UIKit.UIColor
  @available(*, unavailable, renamed: "goodsCellOldPriceTextColor")
  public var goodsCellDiscountTextColor: UIKit.UIColor {
    get
    set
  }
  public var goodsCellOldPriceTextColor: UIKit.UIColor
  public var cellFont: UIKit.UIFont
  public var goodCellTitleFont: UIKit.UIFont
  public var goodCellSubtitleFont: UIKit.UIFont
  public var goodCellPriceFont: UIKit.UIFont
  @available(*, unavailable, renamed: "goodCellOldPriceFont")
  public var goodCellDiscountFont: UIKit.UIFont {
    get
    set
  }
  public var goodCellOldPriceFont: UIKit.UIFont
  public var timerGradientEnable: Swift.Bool
  public var swipeToClose: Swift.Bool
  public var overScrollToClose: Swift.Bool
  public var timerGradient: InAppStorySDK_SwiftUI.TimersGradient
  public var placeholderElementColor: UIKit.UIColor
  public var placeholderBackgroundColor: UIKit.UIColor
  public var readerBackgroundColor: UIKit.UIColor
  public var readerCornerRadius: CoreFoundation.CGFloat
  @available(*, unavailable, message: "Next, the background color of the close button is taken from InAppStory.shared.goodsSubstrateColor")
  public var goodsCloseBackgroundColor: UIKit.UIColor {
    get
    set
  }
  public var goodsSubstrateColor: UIKit.UIColor
  public var goodsDimColor: UIKit.UIColor
  public var goodsSubstrateHeight: CoreFoundation.CGFloat
  public var gamePlaceholderTint: UIKit.UIColor
  public var likeImage: UIKit.UIImage
  public var likeSelectedImage: UIKit.UIImage
  public var dislikeImage: UIKit.UIImage
  public var dislikeSelectedImage: UIKit.UIImage
  public var favoriteImage: UIKit.UIImage
  public var favoriteSelectedImag: UIKit.UIImage
  public var shareImage: UIKit.UIImage
  public var shareSelectedImage: UIKit.UIImage
  public var soundImage: UIKit.UIImage
  public var soundSelectedImage: UIKit.UIImage
  public var closeReaderImage: UIKit.UIImage
  public var refreshImage: UIKit.UIImage
  @available(*, unavailable, renamed: "refreshImage", message: "Please use InAppStory.shared.refreshImage")
  public var refreshGoodsImage: UIKit.UIImage {
    get
    set
  }
  public var goodsCloseImage: UIKit.UIImage
  public var panelSettings: InAppStorySDK_SwiftUI.PanelSettings?
  public var goodCell: (any InAppStorySDK_SwiftUI.GoodsCellProtocol)?
  public var placeholderView: (any InAppStorySDK_SwiftUI.PlaceholderProtocol)?
  public var gamePlaceholderView: (any InAppStorySDK_SwiftUI.DownloadPlaceholderProtocol)?
  public var goodsView: InAppStorySDK_SwiftUI.CustomGoodsView?
  public var closeButtonPosition: InAppStorySDK_SwiftUI.ClosePosition
  public var scrollStyle: InAppStorySDK_SwiftUI.ScrollStyle
  public var presentationStyle: InAppStorySDK_SwiftUI.PresentationStyle
  public var muted: Swift.Bool {
    get
    set
  }
  public var placeholders: [Swift.String : Swift.String] {
    get
    set
  }
  public var imagesPlaceholders: [Swift.String : Swift.String] {
    get
    set
  }
  public var isReaderOpen: Swift.Bool {
    get
  }
  public var isGameOpen: Swift.Bool {
    get
  }
  public var isLoggingEnabled: Swift.Bool
  public var logger: any InAppStorySDK_SwiftUI.IASLoggerProtocol
  public var isDeviceIDEnabled: Swift.Bool
  public var customShare: ((InAppStorySDK_SwiftUI.SharingObject, @escaping ((Swift.Bool) -> Swift.Void)) -> Swift.Void)?
  public var gameComplete: ((_ data: Swift.String, _ result: Swift.Dictionary<Swift.String, Any>?, _ url: Swift.String?) -> Swift.Void)?
  public var gameReaderWillShow: (() -> Swift.Void)?
  public var gameReaderDidClose: (() -> Swift.Void)?
  public var storiesDidUpdated: ((_ isContent: Swift.Bool, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  public var onActionWith: ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType, _ storyType: InAppStorySDK_SwiftUI.StoriesType?) -> Swift.Void)?
  public var storyReaderWillShow: ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  public var storyReaderDidClose: ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  public var favoriteCellDidSelect: (() -> Swift.Void)?
  public var editorCellDidSelect: (() -> Swift.Void)?
  public var getGoodsObject: ((_ skus: Swift.Array<Swift.String>, _ complete: @escaping InAppStorySDK_SwiftUI.GoodsComplete) -> Swift.Void)?
  public var goodItemSelected: ((_ item: any InAppStorySDK_SwiftUI.GoodsObjectProtocol, _ storyType: InAppStorySDK_SwiftUI.StoriesType?) -> Swift.Void)?
  public var sizeForItem: (() -> CoreFoundation.CGSize)?
  public var insetForSection: (() -> UIKit.UIEdgeInsets)?
  public var minimumLineSpacingForSection: (() -> CoreFoundation.CGFloat)?
  public var minimumInteritemSpacingForSection: (() -> CoreFoundation.CGFloat)?
  public var goodsSizeForItem: (() -> CoreFoundation.CGSize)?
  public var goodsInsetForSection: (() -> UIKit.UIEdgeInsets)?
  public var goodsMinimumLineSpacingForSection: (() -> CoreFoundation.CGFloat)?
  public var storiesEvent: (InAppStorySDK_SwiftUI.IASEvent.Story) -> Swift.Void
  public var gameEvent: (InAppStorySDK_SwiftUI.IASEvent.Game) -> Swift.Void
  public var failureEvent: (InAppStorySDK_SwiftUI.IASEvent.Failure) -> Swift.Void
  public var stackFeedUpdate: ((_ newStackObject: InAppStorySDK_SwiftUI.StackFeedObject?) -> Swift.Void)?
  public func initWith(serviceKey: Swift.String, testKey: Swift.String? = nil, settings: InAppStorySDK_SwiftUI.Settings? = nil)
  public func setTags(_ tags: Swift.Array<Swift.String>)
  public func addTags(_ addedTags: Swift.Array<Swift.String>)
  public func removeTags(_ removingTags: Swift.Array<Swift.String>)
  public func getWidgetStories(complete: @escaping (Swift.Array<InAppStorySDK_SwiftUI.WidgetStory>?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func preloadGames()
  public func clearMemory()
  public func clearCache()
  public func closeReader(complete: @escaping () -> Swift.Void)
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func getStackFeed(feed: Swift.String? = nil, complete: @escaping (InAppStorySDK_SwiftUI.StackFeedResult) -> Swift.Void)
  public func showStackReader(with stackList: InAppStorySDK_SwiftUI.StackFeedObject, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, showing: @escaping (_ show: Swift.Bool) -> Swift.Void)
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func showOnboardings(feed: Swift.String = "onboarding", limit: Swift.Int = 0, from target: UIKit.UIViewController, with tags: [Swift.String]? = nil, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
  @available(*, unavailable, renamed: "showOnboardings(feed:limit:from:with:with:complete:)")
  public func showOnboardings(feed: Swift.String = "onboarding", limit: Swift.Int = 0, from target: UIKit.UIViewController, with tags: [Swift.String]? = nil, delegate: any InAppStorySDK_SwiftUI.InAppStoryDelegate, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func present(controller presentingViewController: UIKit.UIViewController, for presentationStyle: UIKit.UIModalPresentationStyle = .overCurrentContext, with transitionStyle: UIKit.UIModalTransitionStyle = .coverVertical)
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func openGame(with game: InAppStorySDK_SwiftUI.Game, from presentingViewController: UIKit.UIViewController? = nil, notificationInfo: Swift.Dictionary<Swift.String, Any>? = nil, complete: ((_ opened: Swift.Bool) -> Swift.Void)? = nil)
  public func closeGame()
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func showStoryOnce(with id: Swift.String, from target: UIKit.UIViewController, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
  public func showStory(with id: Swift.String, from target: UIKit.UIViewController, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
  @available(*, deprecated, renamed: "showStory(with:from:with:complete:)")
  public func showSingle(with id: Swift.String, from target: UIKit.UIViewController, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
  @available(*, unavailable, renamed: "showSingle(with:from:with:complete:)")
  public func showSingle(with id: Swift.String, from target: UIKit.UIViewController, delegate: any InAppStorySDK_SwiftUI.InAppStoryDelegate, with panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, complete: @escaping (_ show: Swift.Bool) -> Swift.Void)
}
extension InAppStorySDK_SwiftUI.InAppStory {
  public func removeFromFavorite(with storyID: Swift.String)
  public func removeAllFavorites()
}
public enum ScrollListDirection {
  case horizontal
  case vertical
  public static func == (a: InAppStorySDK_SwiftUI.ScrollListDirection, b: InAppStorySDK_SwiftUI.ScrollListDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct StoryListView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(feed: Swift.String? = nil, isFavorite: Swift.Bool = false, panelSettings: InAppStorySDK_SwiftUI.PanelSettings? = nil, isEditorEnabled: Swift.Bool = false, refresh: SwiftUI.Binding<Swift.Bool> = .constant(false))
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s21InAppStorySDK_SwiftUI0C8ListViewV4bodyQrvp", 0) __
}
extension InAppStorySDK_SwiftUI.StoryListView {
  @_Concurrency.MainActor(unsafe) public func onUpdate(_ storiesDidUpdated: @escaping (_ isContent: Swift.Bool, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func onAction(_ onAction: @escaping ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func willAppear(_ willAppear: @escaping ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func onDismiss(_ onDismiss: @escaping ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func favoriteDidSelect(_ favoriteSelected: @escaping () -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func editorDidSelect(_ editorSelected: @escaping () -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func getGoodsObject(_ getGoodsObject: @escaping ((_ skus: Swift.Array<Swift.String>, _ complete: @escaping InAppStorySDK_SwiftUI.GoodsComplete) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func goodItemSelected(_ goodItemSelected: @escaping (_ item: any InAppStorySDK_SwiftUI.GoodsObjectProtocol, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListView
}
extension InAppStorySDK_SwiftUI.StoryListView {
  @_Concurrency.MainActor(unsafe) public func onVisibleAreaUpdated(_ onVisibleAreaUpdated: @escaping (_ items: Swift.Array<InAppStorySDK_SwiftUI.VisibleStoryItem>) -> Swift.Void) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func collectVisibleAreaData(_ collect: @escaping ((_ collect: @escaping () -> Swift.Void) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func updateVisibleArea(_ update: @escaping ((_ update: @escaping () -> Swift.Void) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListView
}
extension InAppStorySDK_SwiftUI.StoryListView {
  @_Concurrency.MainActor(unsafe) public func refresh(_ refresh: @escaping ((_ refresh: @escaping (_ feed: Swift.String?, _ tags: Swift.Array<Swift.String>?) -> Swift.Void) -> Swift.Void)) -> InAppStorySDK_SwiftUI.StoryListView
}
extension InAppStorySDK_SwiftUI.StoryListView {
  @_Concurrency.MainActor(unsafe) public func direction(_ direction: InAppStorySDK_SwiftUI.ScrollListDirection) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func edgeInserts(_ inserts: @escaping () -> UIKit.UIEdgeInsets) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func itemsSize(_ size: @escaping () -> CoreFoundation.CGSize) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func lineSpacing(_ spacing: @escaping () -> CoreFoundation.CGFloat) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func interitemSpacing(_ spacing: @escaping () -> CoreFoundation.CGFloat) -> InAppStorySDK_SwiftUI.StoryListView
}
extension InAppStorySDK_SwiftUI.StoryListView {
  @_Concurrency.MainActor(unsafe) public func setStoryCell(customCell: any InAppStorySDK_SwiftUI.StoryCellProtocol) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func setFavoriteCell(customCell: any InAppStorySDK_SwiftUI.FavoriteCellProtocol) -> InAppStorySDK_SwiftUI.StoryListView
  @_Concurrency.MainActor(unsafe) public func setEditorCell(customCell: any InAppStorySDK_SwiftUI.EditorCellProtocol) -> InAppStorySDK_SwiftUI.StoryListView
}
@_hasMissingDesignatedInitializers final public class ConfigurationRepo {
  final public var defaultConfiguration: InAppStorySDK_SwiftUI.PhoneFormat
  final public func add(format: InAppStorySDK_SwiftUI.PhoneFormat)
  @objc deinit
}
public protocol GoodsObjectProtocol : ObjectiveC.NSObjectProtocol {
  var sku: Swift.String! { get set }
}
@objc public class GoodObject : ObjectiveC.NSObject, InAppStorySDK_SwiftUI.GoodsObjectProtocol {
  public var sku: Swift.String!
  public var title: Swift.String?
  public var subtitle: Swift.String?
  public var imageURL: Foundation.URL?
  public var price: Swift.String?
  @available(*, unavailable, renamed: "oldPrice")
  public var discount: Swift.String? {
    get
    set
  }
  public var oldPrice: Swift.String?
  @available(*, unavailable, renamed: "init(sku:title:subtitle:imageURL:price:oldPrice:)")
  public init(sku: Swift.String, title: Swift.String?, subtitle: Swift.String?, imageURL: Foundation.URL?, price: Swift.String?, discount: Swift.String?)
  public init(sku: Swift.String, title: Swift.String?, subtitle: Swift.String?, imageURL: Foundation.URL?, price: Swift.String?, oldPrice: Swift.String?)
  @objc deinit
}
@available(*, unavailable, message: "SDK is phasing out the use of delegates and moving towards the use of closures. More info can be found in the migration guide for version 1.22.x documentation. Migration guide: https://docs.inappstory.com/sdk-guides/ios/migrations.html#migration-to-inappstory-closures-sdk-v1-22-0")
public protocol GoodsDelegateFlowLayout : ObjectiveC.NSObjectProtocol {
  func sizeForItem() -> CoreFoundation.CGSize
  func insetForSection() -> UIKit.UIEdgeInsets
  func minimumLineSpacingForSection() -> CoreFoundation.CGFloat
}
public func MD5(_ input: Swift.String) -> Swift.String
public protocol StoryCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  var storyID: Swift.String! { get set }
  func setTitle(_ text: Swift.String)
  func setImageURL(_ url: Foundation.URL)
  func setVideoURL(_ url: Foundation.URL)
  func setOpened(_ value: Swift.Bool)
  func setHighlight(_ value: Swift.Bool)
  func setBackgroundColor(_ color: UIKit.UIColor)
  func setTitleColor(_ color: UIKit.UIColor)
  func setSound(_ value: Swift.Bool)
  func setUGCPayload(_ payload: Swift.Dictionary<Swift.String, Any>)
}
extension InAppStorySDK_SwiftUI.StoryCellProtocol {
  public func setUGCPayload(_ payload: Swift.Dictionary<Swift.String, Any>)
}
extension Foundation.Data {
  @available(*, deprecated, message: "Please use `Int64` for `size` and provider `position`.")
  public static func compress(size: Swift.Int, bufferSize: Swift.Int, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> InAppStorySDK_SwiftUI.CRC32
  @available(*, deprecated, message: "Please use `Int64` for `size` and provider `position`.")
  public static func decompress(size: Swift.Int, bufferSize: Swift.Int, skipCRC32: Swift.Bool, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> InAppStorySDK_SwiftUI.CRC32
}
@available(*, unavailable, message: "SDK is phasing out the use of delegates and moving towards the use of closures. More info can be found in the migration guide for version 1.22.x documentation. Migration guide: https://docs.inappstory.com/sdk-guides/ios/migrations.html#migration-to-inappstory-closures-sdk-v1-22-0")
public protocol StoryViewDelegateFlowLayout : ObjectiveC.NSObjectProtocol {
  func sizeForItem() -> CoreFoundation.CGSize
  func insetForSection() -> UIKit.UIEdgeInsets
  func minimumLineSpacingForSection() -> CoreFoundation.CGFloat
  func minimumInteritemSpacingForSection() -> CoreFoundation.CGFloat
}
public protocol PlaceholderProtocol : UIKit.UIView {
  var isAnimate: Swift.Bool { get }
  func start()
  func stop()
}
public enum CompressionMethod : Swift.UInt16 {
  case none
  case deflate
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public typealias CRC32 = Swift.UInt32
public typealias Consumer = (_ data: Foundation.Data) throws -> Swift.Void
public typealias Provider = (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data
extension Foundation.Data {
  public func crc32(checksum: InAppStorySDK_SwiftUI.CRC32) -> InAppStorySDK_SwiftUI.CRC32
  public static func compress(size: Swift.Int64, bufferSize: Swift.Int, provider: (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> InAppStorySDK_SwiftUI.CRC32
  public static func decompress(size: Swift.Int64, bufferSize: Swift.Int, skipCRC32: Swift.Bool, provider: (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> InAppStorySDK_SwiftUI.CRC32
}
@objc public enum ClosePosition : Swift.Int {
  case left, right, bottomLeft, bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ScrollStyle : Swift.Int {
  case flat, cover, cube, depth
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PresentationStyle : Swift.Int {
  case crossDissolve, modal, zoom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Quality : Swift.Int {
  case medium, high
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GoodsFailure : Swift.Error {
  case refresh
  case close
  public static func == (a: InAppStorySDK_SwiftUI.GoodsFailure, b: InAppStorySDK_SwiftUI.GoodsFailure) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias GoodsComplete = (Swift.Result<Swift.Array<any InAppStorySDK_SwiftUI.GoodsObjectProtocol>, InAppStorySDK_SwiftUI.GoodsFailure>) -> Swift.Void
public enum ActionType {
  case button, swipe, game, deeplink
  public static func == (a: InAppStorySDK_SwiftUI.ActionType, b: InAppStorySDK_SwiftUI.ActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StoriesType {
  case list(feed: Swift.String?)
  case ugcList
  case single
  case onboarding(feed: Swift.String)
}
@available(*, unavailable, message: "SDK is phasing out the use of delegates and moving towards the use of closures. More info can be found in the migration guide for version 1.22.x documentation. Migration guide: https://docs.inappstory.com/sdk-guides/ios/migrations.html#migration-to-inappstory-closures-sdk-v1-22-0")
public protocol InAppStoryDelegate : ObjectiveC.NSObjectProtocol {
  func storiesDidUpdated(isContent: Swift.Bool, from storyType: InAppStorySDK_SwiftUI.StoriesType)
  func storyReader(actionWith target: Swift.String, for type: InAppStorySDK_SwiftUI.ActionType, from storyType: InAppStorySDK_SwiftUI.StoriesType)
  func storyReaderWillShow(with storyType: InAppStorySDK_SwiftUI.StoriesType)
  func storyReaderDidClose(with storyType: InAppStorySDK_SwiftUI.StoriesType)
  func favoriteCellDidSelect()
  func editorCellDidSelect()
  func getGoodsObject(with skus: Swift.Array<Swift.String>, complete: @escaping InAppStorySDK_SwiftUI.GoodsComplete)
  func goodItemSelected(_ item: any InAppStorySDK_SwiftUI.GoodsObjectProtocol, with storyType: InAppStorySDK_SwiftUI.StoriesType)
}
public enum ListDirection {
  case horizontal(rows: Swift.Int = 1)
  case vertical(colums: Swift.Int = 3)
}
@_hasMissingDesignatedInitializers public class VisibleStoryItem : Swift.Equatable {
  final public let storyId: Swift.Int
  final public let index: Swift.Int
  final public let title: Swift.String?
  final public let feed: Swift.String
  final public let tags: Swift.Array<Swift.String>
  final public let slidesCount: Swift.Int
  public var visiblePercents: Swift.Double
  public static func == (lhs: InAppStorySDK_SwiftUI.VisibleStoryItem, rhs: InAppStorySDK_SwiftUI.VisibleStoryItem) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CustomGoodsView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open func setSKUItems(_ items: Swift.Array<Swift.String>)
  @_Concurrency.MainActor(unsafe) open func setReaderFrame(_ frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) final public func goodsItemClick(with sku: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func close()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CSPhoneFormattedTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var isSelectable: Swift.Bool
  @_Concurrency.MainActor(unsafe) final public let config: InAppStorySDK_SwiftUI.ConfigurationRepo
  @_Concurrency.MainActor(unsafe) public var hasPredictiveInput: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var prefix: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var delegate: (any UIKit.UITextFieldDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var textDidChangeBlock: ((_ textField: UIKit.UITextField?) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func phoneNumber() -> Swift.String?
  @_Concurrency.MainActor(unsafe) public func phoneNumberWithoutPrefix() -> Swift.String?
  @_Concurrency.MainActor(unsafe) public var formattedText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc deinit
}
public protocol EditorCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
}
extension InAppStorySDK_SwiftUI.Archive {
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func extract(_ entry: InAppStorySDK_SwiftUI.Entry, to url: Foundation.URL, bufferSize: Swift.UInt32, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil) throws -> InAppStorySDK_SwiftUI.CRC32
  @available(*, deprecated, message: "Please use `Int` for `bufferSize`.")
  final public func extract(_ entry: InAppStorySDK_SwiftUI.Entry, bufferSize: Swift.UInt32, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> InAppStorySDK_SwiftUI.CRC32
}
extension InAppStorySDK_SwiftUI.Archive {
  final public func addEntry(with path: Swift.String, relativeTo baseURL: Foundation.URL, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethod = .none, bufferSize: Swift.Int = defaultWriteChunkSize, progress: Foundation.Progress? = nil) throws
  final public func addEntry(with path: Swift.String, fileURL: Foundation.URL, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethod = .none, bufferSize: Swift.Int = defaultWriteChunkSize, progress: Foundation.Progress? = nil) throws
  final public func addEntry(with path: Swift.String, type: InAppStorySDK_SwiftUI.Entry.EntryType, uncompressedSize: Swift.Int64, modificationDate: Foundation.Date = Date(), permissions: Swift.UInt16? = nil, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethod = .none, bufferSize: Swift.Int = defaultWriteChunkSize, progress: Foundation.Progress? = nil, provider: (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data) throws
  final public func remove(_ entry: InAppStorySDK_SwiftUI.Entry, bufferSize: Swift.Int = defaultReadChunkSize, progress: Foundation.Progress? = nil) throws
}
extension InAppStorySDK_SwiftUI.Archive {
  final public func totalUnitCountForRemoving(_ entry: InAppStorySDK_SwiftUI.Entry) -> Swift.Int64
  final public func totalUnitCountForReading(_ entry: InAppStorySDK_SwiftUI.Entry) -> Swift.Int64
  final public func totalUnitCountForAddingItem(at url: Foundation.URL) -> Swift.Int64
}
public struct Entry : Swift.Equatable {
  public enum EntryType : Swift.Int {
    case file
    case directory
    case symlink
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func path(using encoding: Swift.String.Encoding) -> Swift.String
  public var path: Swift.String {
    get
  }
  public var fileAttributes: [Foundation.FileAttributeKey : Any] {
    get
  }
  public var checksum: InAppStorySDK_SwiftUI.CRC32 {
    get
  }
  public var type: InAppStorySDK_SwiftUI.Entry.EntryType {
    get
  }
  public var isCompressed: Swift.Bool {
    get
  }
  public var compressedSize: Swift.UInt64 {
    get
  }
  public var uncompressedSize: Swift.UInt64 {
    get
  }
  public static func == (lhs: InAppStorySDK_SwiftUI.Entry, rhs: InAppStorySDK_SwiftUI.Entry) -> Swift.Bool
}
extension InAppStorySDK_SwiftUI.ArchiveOD {
  final public func addEntry(with path: Swift.String, relativeTo baseURL: Foundation.URL, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethodOD = .none, bufferSize: Swift.UInt32 = defaultWriteChunkSizeOD, progress: Foundation.Progress? = nil) throws
  final public func addEntry(with path: Swift.String, type: InAppStorySDK_SwiftUI.Entry.EntryType, uncompressedSize: Swift.UInt32, modificationDate: Foundation.Date = Date(), permissions: Swift.UInt16? = nil, compressionMethod: InAppStorySDK_SwiftUI.CompressionMethodOD = .none, bufferSize: Swift.UInt32 = defaultWriteChunkSizeOD, progress: Foundation.Progress? = nil, provider: (_ position: Swift.Int64, _ size: Swift.Int) throws -> Foundation.Data) throws
  final public func remove(_ entry: InAppStorySDK_SwiftUI.EntryOD, bufferSize: Swift.UInt32 = defaultReadChunkSizeOD, progress: Foundation.Progress? = nil) throws
}
public struct EntryOD : Swift.Equatable {
  public func path(using encoding: Swift.String.Encoding) -> Swift.String
  public var path: Swift.String {
    get
  }
  public var fileAttributes: [Foundation.FileAttributeKey : Any] {
    get
  }
  public var checksum: InAppStorySDK_SwiftUI.CRC32 {
    get
  }
  public var type: InAppStorySDK_SwiftUI.Entry.EntryType {
    get
  }
  public var compressedSize: Swift.Int {
    get
  }
  public var uncompressedSize: Swift.Int {
    get
  }
  public static func == (lhs: InAppStorySDK_SwiftUI.EntryOD, rhs: InAppStorySDK_SwiftUI.EntryOD) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoryView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isFavoriteView: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var target: UIKit.UIViewController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editorCell: (any InAppStorySDK_SwiftUI.EditorCellProtocol)! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyCell: (any InAppStorySDK_SwiftUI.StoryCellProtocol)! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var favoriteCell: (any InAppStorySDK_SwiftUI.FavoriteCellProtocol)! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isContent: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var panelSettings: InAppStorySDK_SwiftUI.PanelSettings? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isEditorEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var direction: InAppStorySDK_SwiftUI.ListDirection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storiesDidUpdated: ((_ isContent: Swift.Bool, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onActionWith: ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyReaderWillShow: ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var storyReaderDidClose: ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var favoriteCellDidSelect: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editorCellDidSelect: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onVisibleAreaUpdated: ((_ items: Swift.Array<InAppStorySDK_SwiftUI.VisibleStoryItem>) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var getGoodsObject: ((_ skus: Swift.Array<Swift.String>, _ complete: @escaping InAppStorySDK_SwiftUI.GoodsComplete) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var goodItemSelected: ((_ item: any InAppStorySDK_SwiftUI.GoodsObjectProtocol, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var sizeForItem: (() -> CoreFoundation.CGSize)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var insetForSection: (() -> UIKit.UIEdgeInsets)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumLineSpacingForSection: (() -> CoreFoundation.CGFloat)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumInteritemSpacingForSection: (() -> CoreFoundation.CGFloat)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect = .zero, feed: Swift.String = "default", favorite: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension InAppStorySDK_SwiftUI.StoryView {
  @_Concurrency.MainActor(unsafe) public func create()
  @_Concurrency.MainActor(unsafe) public func refresh(newFeed: Swift.String? = nil, newTags: Swift.Array<Swift.String>? = nil)
  @_Concurrency.MainActor(unsafe) public func collectVisibleAreaData()
  @_Concurrency.MainActor(unsafe) public func updateVisibleArea()
}
extension UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
}
public let CreateRequest: Foundation.Notification.Name
public let AppendResponse: Foundation.Notification.Name
public let CreateCacheRequest: Foundation.Notification.Name
public let AppendCacheResponse: Foundation.Notification.Name
public struct UploadServerEndpoint : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public let defaultReadChunkSize: Swift.Int
public let defaultWriteChunkSize: Swift.Int
public let defaultFilePermissions: Swift.UInt16
public let defaultDirectoryPermissions: Swift.UInt16
final public class Archive : Swift.Sequence {
  public enum ArchiveError : Swift.Error {
    case unreadableArchive
    case unwritableArchive
    case invalidEntryPath
    case invalidCompressionMethod
    case invalidCRC32
    case cancelledOperation
    case invalidBufferSize
    case invalidEntrySize
    case invalidLocalHeaderDataOffset
    case invalidLocalHeaderSize
    case invalidCentralDirectoryOffset
    case invalidCentralDirectorySize
    case invalidCentralDirectoryEntryCount
    case missingEndOfCentralDirectoryRecord
    public static func == (a: InAppStorySDK_SwiftUI.Archive.ArchiveError, b: InAppStorySDK_SwiftUI.Archive.ArchiveError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AccessMode : Swift.UInt {
    case create
    case read
    case update
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  final public let url: Foundation.URL
  final public let accessMode: InAppStorySDK_SwiftUI.Archive.AccessMode
  public init?(url: Foundation.URL, accessMode mode: InAppStorySDK_SwiftUI.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  public init?(data: Foundation.Data = Data(), accessMode mode: InAppStorySDK_SwiftUI.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  @objc deinit
  final public func makeIterator() -> Swift.AnyIterator<InAppStorySDK_SwiftUI.Entry>
  final public subscript(path: Swift.String) -> InAppStorySDK_SwiftUI.Entry? {
    get
  }
  public typealias Element = InAppStorySDK_SwiftUI.Entry
  public typealias Iterator = Swift.AnyIterator<InAppStorySDK_SwiftUI.Entry>
}
public let defaultReadChunkSizeOD: Swift.UInt32
public let defaultWriteChunkSizeOD: Swift.UInt32
public enum CompressionMethodOD : Swift.UInt16 {
  case none
  case deflate
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
final public class ArchiveOD : Swift.Sequence {
  public enum ArchiveErrorOD : Swift.Error {
    case unreadableArchive
    case unwritableArchive
    case invalidEntryPath
    case invalidCompressionMethod
    case invalidStartOfCentralDirectoryOffset
    case missingEndOfCentralDirectoryRecord
    case cancelledOperation
    public static func == (a: InAppStorySDK_SwiftUI.ArchiveOD.ArchiveErrorOD, b: InAppStorySDK_SwiftUI.ArchiveOD.ArchiveErrorOD) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AccessModeOD : Swift.UInt {
    case create
    case read
    case update
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  final public let url: Foundation.URL
  final public let accessMode: InAppStorySDK_SwiftUI.ArchiveOD.AccessModeOD
  public init?(url: Foundation.URL, accessMode mode: InAppStorySDK_SwiftUI.ArchiveOD.AccessModeOD, preferredEncoding: Swift.String.Encoding? = nil)
  public init?(data: Foundation.Data = Data(), accessMode mode: InAppStorySDK_SwiftUI.ArchiveOD.AccessModeOD, preferredEncoding: Swift.String.Encoding? = nil)
  @objc deinit
  final public func makeIterator() -> Swift.AnyIterator<InAppStorySDK_SwiftUI.EntryOD>
  final public subscript(path: Swift.String) -> InAppStorySDK_SwiftUI.EntryOD? {
    get
  }
  public typealias Element = InAppStorySDK_SwiftUI.EntryOD
  public typealias Iterator = Swift.AnyIterator<InAppStorySDK_SwiftUI.EntryOD>
}
extension InAppStorySDK_SwiftUI.ArchiveOD {
  final public func totalUnitCountForRemoving(_ entry: InAppStorySDK_SwiftUI.EntryOD) -> Swift.Int64
  final public func totalUnitCountForReading(_ entry: InAppStorySDK_SwiftUI.EntryOD) -> Swift.Int64
  final public func totalUnitCountForAddingItem(at url: Foundation.URL) -> Swift.Int64
}
@available(*, unavailable, renamed: "DownloadPlaceholderProtocol")
public protocol GamePlaceholderProtocol : UIKit.UIView {
  func setProgress(progress: Swift.Double)
}
public protocol DownloadPlaceholderProtocol : UIKit.UIView {
  func setProgress(progress: Swift.Double)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StoryUGCView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var target: UIKit.UIViewController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editorCell: (any InAppStorySDK_SwiftUI.EditorCellProtocol)! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyCell: (any InAppStorySDK_SwiftUI.StoryCellProtocol)! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var isContent: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isEditorEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var direction: InAppStorySDK_SwiftUI.ListDirection {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storiesDidUpdated: ((_ isContent: Swift.Bool, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var onActionWith: ((_ target: Swift.String, _ type: InAppStorySDK_SwiftUI.ActionType, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var storyReaderWillShow: ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var storyReaderDidClose: ((_ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var favoriteCellDidSelect: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var editorCellDidSelect: (() -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var onVisibleAreaUpdated: ((_ items: Swift.Array<InAppStorySDK_SwiftUI.VisibleStoryItem>) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var getGoodsObject: ((_ skus: Swift.Array<Swift.String>, _ complete: @escaping InAppStorySDK_SwiftUI.GoodsComplete) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var goodItemSelected: ((_ item: any InAppStorySDK_SwiftUI.GoodsObjectProtocol, _ storyType: InAppStorySDK_SwiftUI.StoriesType) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public var sizeForItem: (() -> CoreFoundation.CGSize)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var insetForSection: (() -> UIKit.UIEdgeInsets)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumLineSpacingForSection: (() -> CoreFoundation.CGFloat)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var minimumInteritemSpacingForSection: (() -> CoreFoundation.CGFloat)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect = .zero, filter: Swift.Dictionary<Swift.String, Any> = [:])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension InAppStorySDK_SwiftUI.StoryUGCView {
  @_Concurrency.MainActor(unsafe) public func create()
  @_Concurrency.MainActor(unsafe) public func refresh()
  @_Concurrency.MainActor(unsafe) public func collectVisibleAreaData()
  @_Concurrency.MainActor(unsafe) public func updateVisibleArea()
}
public protocol FavoriteCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  var favoritesCount: Swift.Int { get set }
  func setHighlight(_ value: Swift.Bool)
  func setImages(_ urls: Swift.Array<Foundation.URL?>)
  func setImagesColors(_ colors: Swift.Array<UIKit.UIColor?>)
  func setBackgroundColor(_ color: UIKit.UIColor)
}
public protocol GoodsCellProtocol : UIKit.UICollectionViewCell {
  static var reuseIdentifier: Swift.String { get }
  static var nib: UIKit.UINib? { get }
  func setGoodObject(_ object: (any InAppStorySDK_SwiftUI.GoodsObjectProtocol)!)
}
extension InAppStorySDK_SwiftUI.StoryType : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.StoryType : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.StoryType : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.StorySource : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.StorySource : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.StorySource : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.ShowStoryAction : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ShowStoryAction : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ShowStoryAction : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.CloseStoryAction : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.CloseStoryAction : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.CloseStoryAction : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.IASLogLevel : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.IASLogLevel : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ScrollListDirection : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ScrollListDirection : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.CompressionMethod : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.CompressionMethod : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.CompressionMethod : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.ClosePosition : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ClosePosition : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ClosePosition : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.ScrollStyle : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ScrollStyle : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ScrollStyle : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.PresentationStyle : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.PresentationStyle : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.PresentationStyle : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.Quality : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.Quality : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.Quality : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.GoodsFailure : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.GoodsFailure : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ActionType : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ActionType : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.Entry.EntryType : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.Entry.EntryType : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.Entry.EntryType : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.Archive.ArchiveError : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.Archive.ArchiveError : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.Archive.AccessMode : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.Archive.AccessMode : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.Archive.AccessMode : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.CompressionMethodOD : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.CompressionMethodOD : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.CompressionMethodOD : Swift.RawRepresentable {}
extension InAppStorySDK_SwiftUI.ArchiveOD.ArchiveErrorOD : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ArchiveOD.ArchiveErrorOD : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ArchiveOD.AccessModeOD : Swift.Equatable {}
extension InAppStorySDK_SwiftUI.ArchiveOD.AccessModeOD : Swift.Hashable {}
extension InAppStorySDK_SwiftUI.ArchiveOD.AccessModeOD : Swift.RawRepresentable {}
